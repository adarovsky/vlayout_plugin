/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.sdk.language.psi.VLayoutTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_VLayoutLexer.flex</tt>
 */
public class _VLayoutLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15328 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\4\21\1\74\3\21\1\75\2\21\1\76\1\77\7\21"+
    "\123\26\1\100\7\26\1\101\1\102\12\26\1\103\24\21\1\26\1\104\u0702\21");

  /* The ZZ_CMAP_Y table has 4416 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\21\1\22\3\21\1\22\71\21\1\23\1\21\1\24\1\0\1\25\1\26\12"+
    "\0\1\20\5\0\1\27\1\30\1\31\1\32\2\21\1\33\11\21\1\34\21\21\1\24\1\35\24\21"+
    "\1\36\3\21\1\22\1\37\1\36\4\21\5\0\1\21\1\34\1\40\1\0\3\21\2\41\3\0\1\21\1"+
    "\41\7\21\1\36\1\42\1\43\14\21\1\44\1\25\1\36\1\45\1\42\1\46\2\0\6\21\1\0\1"+
    "\47\14\21\1\24\1\0\1\42\1\50\3\21\1\41\1\51\1\17\3\21\1\35\1\21\1\25\2\0\3"+
    "\21\1\52\10\0\2\21\1\27\1\53\2\0\1\54\1\21\1\55\1\24\11\21\1\44\1\21\1\27"+
    "\1\45\1\21\1\56\1\42\1\36\1\21\1\44\1\57\1\60\2\21\1\61\1\62\1\63\1\57\1\64"+
    "\1\65\1\66\1\56\1\42\1\24\1\0\1\67\1\70\1\60\2\21\1\61\1\71\1\23\1\70\1\72"+
    "\1\37\1\73\1\74\1\42\1\53\1\0\1\67\1\34\1\33\2\21\1\61\1\75\1\63\1\34\1\76"+
    "\1\52\1\0\1\56\1\42\1\0\1\37\1\67\1\57\1\60\2\21\1\61\1\75\1\63\1\57\1\72"+
    "\1\77\1\66\1\56\1\42\1\37\1\0\1\100\1\101\1\102\1\103\1\104\1\101\1\21\1\23"+
    "\1\101\1\105\1\106\1\0\1\74\1\42\2\0\1\44\1\27\1\61\2\21\1\61\1\21\1\63\1"+
    "\27\1\105\1\107\1\41\1\56\1\42\2\0\1\44\1\27\1\61\2\21\1\61\1\44\1\63\1\27"+
    "\1\105\1\107\1\31\1\56\1\42\1\110\1\0\1\67\1\27\1\61\4\21\1\111\1\27\1\112"+
    "\1\54\1\65\1\56\1\42\1\0\1\35\1\100\1\21\1\22\1\35\2\21\1\33\1\113\1\22\1"+
    "\65\1\114\1\21\1\74\1\42\1\115\1\0\1\36\6\21\1\41\1\22\1\20\1\42\1\116\4\0"+
    "\1\117\1\120\1\54\1\36\1\121\1\100\1\21\1\122\1\114\1\20\1\42\1\123\4\0\1"+
    "\52\3\0\1\42\1\116\2\0\1\21\1\36\3\21\1\25\1\36\1\21\1\24\2\21\1\36\3\21\1"+
    "\25\10\0\6\21\1\22\1\60\1\42\1\116\2\21\1\111\1\124\2\21\1\22\1\31\1\42\1"+
    "\125\4\21\1\34\1\20\5\21\1\126\51\21\1\102\1\22\1\102\5\21\1\102\4\21\1\102"+
    "\1\22\1\102\1\21\1\22\7\21\1\102\10\21\1\70\4\0\2\21\2\0\12\21\2\53\1\36\114"+
    "\21\1\57\2\21\1\127\2\21\1\41\11\21\1\101\1\21\1\52\1\21\1\27\1\130\1\0\2"+
    "\21\1\130\1\0\2\21\1\130\1\0\1\21\1\27\1\131\1\0\6\21\1\132\2\21\1\52\1\65"+
    "\1\133\1\42\1\116\4\0\1\42\1\116\13\21\1\0\5\21\1\41\10\21\1\53\1\0\3\21\1"+
    "\22\1\21\1\130\1\21\1\52\1\74\1\42\3\21\1\53\1\25\1\0\5\21\1\130\3\21\1\24"+
    "\1\42\1\116\4\0\3\21\1\130\7\21\1\22\1\36\1\21\1\25\1\0\1\42\1\116\1\42\1"+
    "\116\1\65\13\0\6\21\1\44\1\21\1\44\1\130\1\42\1\116\4\0\5\21\1\134\1\42\1"+
    "\50\4\21\1\34\1\21\1\24\1\0\6\21\1\53\1\0\1\42\1\135\1\42\1\50\3\21\1\53\1"+
    "\21\1\52\13\0\1\136\1\137\1\0\30\21\4\0\1\65\1\21\1\25\1\0\42\21\2\53\4\21"+
    "\2\53\1\21\1\140\3\21\1\53\6\21\1\27\1\114\1\141\1\25\1\132\1\130\1\21\1\25"+
    "\1\141\1\25\1\142\1\143\3\0\1\144\5\0\1\145\2\0\1\37\1\65\2\0\1\21\1\25\14"+
    "\0\1\146\1\35\1\113\1\147\1\26\1\150\1\21\1\134\1\47\1\151\2\0\5\21\1\52\144"+
    "\0\1\77\6\21\1\24\42\0\5\21\1\22\5\21\1\22\20\21\1\25\1\152\1\115\1\0\4\21"+
    "\1\34\1\20\7\21\1\65\2\0\2\21\1\22\1\0\10\22\4\21\5\0\1\65\72\0\1\153\3\0"+
    "\1\36\1\24\1\147\1\25\1\36\11\21\1\22\1\47\1\36\12\21\1\126\1\47\4\21\1\53"+
    "\1\36\12\21\1\22\2\0\3\21\1\41\6\0\170\21\1\53\11\0\72\21\1\53\5\0\21\21\1"+
    "\25\10\0\5\21\1\53\41\21\1\25\2\21\1\42\1\154\2\0\5\21\1\22\1\54\1\155\16"+
    "\21\4\0\1\65\1\21\1\35\14\21\1\60\3\21\1\22\1\21\7\0\1\65\1\21\1\156\1\126"+
    "\3\21\3\0\6\21\1\130\1\0\10\21\1\113\1\0\1\42\1\116\2\0\1\35\1\157\1\42\1"+
    "\50\3\21\1\41\4\21\1\41\1\0\3\21\1\25\6\21\1\126\1\21\1\0\1\65\1\42\1\116"+
    "\1\27\1\21\1\42\1\160\6\21\1\22\1\0\1\21\1\53\1\42\1\116\2\21\1\22\1\161\7"+
    "\21\1\22\1\162\2\0\1\163\2\21\1\164\1\0\3\165\1\0\2\22\5\21\1\126\1\53\1\0"+
    "\17\21\1\41\1\42\1\116\64\21\1\130\1\0\2\21\1\22\1\55\5\21\1\130\40\0\55\21"+
    "\1\53\15\21\1\24\4\0\1\22\1\0\1\55\1\47\1\21\1\61\1\22\1\114\1\166\15\21\1"+
    "\24\3\0\1\55\54\21\1\53\2\0\10\21\1\35\6\21\5\0\1\21\1\130\16\0\1\27\20\21"+
    "\1\25\2\0\1\42\1\116\1\36\2\21\1\41\1\36\2\21\1\41\1\77\12\21\1\22\3\35\1"+
    "\167\4\0\1\21\1\44\2\21\1\22\2\21\1\170\1\21\1\53\1\21\1\53\4\0\17\21\1\41"+
    "\10\0\6\21\1\25\41\0\3\21\1\25\6\21\1\52\5\0\4\21\2\0\3\21\1\41\5\21\1\41"+
    "\3\21\1\53\4\21\1\130\1\21\1\147\5\0\23\21\1\53\1\42\1\116\4\21\1\130\4\21"+
    "\1\130\5\21\1\0\6\21\1\130\23\0\46\21\1\22\1\0\2\21\1\53\1\0\1\21\23\0\1\53"+
    "\1\61\4\21\1\34\1\171\2\21\1\53\1\0\2\21\1\22\1\0\3\21\1\22\10\0\2\21\1\172"+
    "\1\0\2\21\1\53\1\0\3\21\1\24\10\0\7\21\1\77\10\0\1\137\1\54\1\44\1\36\2\21"+
    "\1\130\5\0\3\21\1\25\3\21\1\25\4\0\1\21\1\36\2\21\1\25\3\0\6\21\1\53\1\0\2"+
    "\21\1\53\1\0\2\21\1\41\1\0\2\21\1\24\15\0\11\21\1\52\6\0\6\21\1\41\1\0\6\21"+
    "\1\41\41\0\10\21\1\53\3\0\1\74\1\42\2\0\1\35\6\21\1\52\2\0\3\21\1\52\1\42"+
    "\1\116\6\21\1\173\1\42\2\0\4\21\1\174\1\0\10\21\1\175\1\0\1\42\1\176\4\0\2"+
    "\21\1\33\3\21\1\57\1\31\10\0\1\22\1\150\1\21\1\34\1\21\1\52\7\21\1\52\1\42"+
    "\1\116\1\44\1\57\1\60\2\21\1\61\1\75\1\63\1\57\1\72\1\106\1\47\1\130\23\0"+
    "\10\21\1\156\1\41\1\42\1\116\4\0\10\21\1\177\1\0\1\42\1\116\24\0\6\21\1\53"+
    "\1\22\3\0\1\53\4\0\7\21\1\22\1\200\1\0\1\42\1\116\4\0\6\21\1\53\1\0\1\42\1"+
    "\116\6\0\3\21\1\63\1\21\1\41\1\42\1\116\54\0\10\21\1\42\1\116\1\0\1\65\70"+
    "\0\7\21\1\52\40\0\1\21\1\61\4\21\2\22\1\52\1\0\1\42\1\116\2\0\1\35\3\21\1"+
    "\35\2\21\1\36\1\22\51\0\63\21\1\24\14\0\15\21\1\22\2\0\30\21\1\130\27\0\5"+
    "\21\1\22\72\0\10\21\1\22\67\0\7\21\1\52\3\21\1\22\1\42\1\116\14\0\3\21\1\53"+
    "\2\0\6\21\1\22\1\0\1\130\1\0\1\42\1\116\1\55\2\21\1\47\2\21\56\0\10\21\1\25"+
    "\1\0\5\21\1\22\2\0\1\55\1\21\10\0\1\52\3\0\75\21\1\25\2\0\36\21\1\41\41\0"+
    "\1\24\77\0\15\21\1\41\1\21\1\25\1\21\1\52\1\21\1\151\54\0\12\21\1\27\10\21"+
    "\1\27\1\201\1\136\1\21\1\202\1\44\7\21\1\34\1\111\2\27\3\21\1\203\1\114\1"+
    "\35\1\61\51\21\1\53\3\21\1\61\2\21\1\126\3\21\1\126\2\21\1\27\3\21\1\27\2"+
    "\21\1\22\3\21\1\22\3\21\1\61\3\21\1\61\2\21\1\126\1\56\6\42\1\22\2\21\1\60"+
    "\1\166\1\41\72\0\30\21\1\25\7\0\10\21\1\155\1\0\1\42\1\116\24\0\1\44\3\21"+
    "\1\117\1\36\1\126\1\204\1\146\1\205\1\117\1\140\1\117\2\126\1\73\1\21\1\33"+
    "\1\21\1\130\1\67\1\33\1\21\1\130\116\0\3\21\1\24\3\21\1\24\3\21\1\24\16\0"+
    "\32\21\1\22\5\0\106\21\1\25\1\0\33\21\1\53\120\21\1\24\53\0\3\21\1\53\74\0");

  /* The ZZ_CMAP_A table has 1072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\2\0\1\2\1\16\1\6\1\11\1\0\1\24\1\25\1\0\1\34\1\35\1\23\1\21"+
    "\1\27\1\22\1\10\1\14\12\4\1\26\1\0\1\31\1\15\1\30\1\20\1\46\6\13\14\5\1\0"+
    "\1\7\2\0\1\5\1\0\1\43\3\13\1\41\1\42\5\5\1\44\5\5\1\37\1\45\1\36\1\40\5\5"+
    "\1\32\1\17\1\33\7\0\1\1\2\0\1\2\11\0\1\3\12\0\1\3\2\0\17\3\1\0\2\3\4\0\4\3"+
    "\6\0\5\3\7\0\1\3\1\0\1\3\1\0\5\3\1\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1"+
    "\0\1\3\1\0\4\3\1\0\13\3\1\0\1\3\2\0\6\3\1\0\7\3\1\0\1\3\7\0\2\3\1\0\2\3\1"+
    "\0\4\3\5\0\12\12\4\0\6\3\1\0\4\3\4\0\3\3\2\12\3\3\2\0\1\3\5\0\3\3\2\12\6\3"+
    "\4\0\2\3\2\0\1\3\7\0\6\3\6\0\4\3\3\0\11\3\2\0\2\12\5\3\2\0\2\3\2\0\6\3\1\0"+
    "\7\3\1\0\1\3\3\0\4\3\3\0\4\3\2\0\2\3\1\0\1\3\10\0\1\3\4\0\2\3\1\0\1\3\1\0"+
    "\3\3\1\0\6\3\4\0\2\3\1\0\2\3\1\0\2\3\1\0\1\3\2\0\2\3\4\0\4\3\1\0\1\3\7\0\2"+
    "\12\1\3\1\0\2\3\1\0\5\3\1\0\2\3\11\0\2\3\2\0\2\3\1\0\6\3\3\0\3\3\1\0\4\3\3"+
    "\0\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\1\3\1\0\3\3\3\0\1\3\6\0\1\3\5\0\2\3\2\0"+
    "\2\3\5\0\3\3\2\0\4\3\1\0\3\3\1\0\1\3\1\0\4\3\1\0\1\3\2\0\5\3\1\0\1\3\3\0\2"+
    "\3\4\0\2\12\7\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\3\0\3\3\1\0\1\3\1\0\3"+
    "\3\1\0\3\3\2\0\2\12\2\0\5\3\5\0\2\3\2\12\2\0\2\3\2\0\3\3\1\0\4\3\1\2\13\3"+
    "\4\0\1\3\1\0\2\3\4\0\4\3\2\0\2\3\4\0\1\3\3\0\2\3\2\0\4\3\2\12\3\0\3\3\1\0"+
    "\4\3\1\0\6\3\1\0\2\3\2\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\2\0\3\3\1\0\2\3\13\2"+
    "\5\0\2\1\5\0\1\2\7\0\1\2\2\0\1\3\4\0\1\3\1\0\5\3\2\0\1\3\1\0\4\3\1\0\3\3\4"+
    "\0\1\3\4\0\4\3\1\0\1\2\4\0\3\3\2\12\2\3\4\0\4\3\3\0\3\3\1\0\3\3\1\0\1\3\3"+
    "\0\1\3\1\0\1\3\2\0\2\12\5\3\3\0\1\3\3\0\3\3\1\0\1\3\10\0\3\3\4\0\4\3\3\0\6"+
    "\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\3\3\3\0\3\3\1\0\2\3\1\0\2\3\3\0\1\3\2\0\4\3"+
    "\1\0\2\3\2\0\3\3\3\0\2\12\3\3\3\0\1\3\2\0\4\3\3\0\2\12\1\3\1\0\1\3\3\0\2\3"+
    "\2\0\2\3\1\0\2\3\3\0\1\3\5\0\1\3\2\0\2\3\1\0\2\3\1\0\1\3\1\0\5\3\1\0\4\3\2"+
    "\0\1\3\1\0\1\3\5\0\1\3\1\0\1\3\1\0\3\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\1\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\3\1\27\1\4\1\0\1\30\2\0"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\2\3"+
    "\1\30\1\0\2\3\1\0\1\40\1\3\1\0\1\41"+
    "\1\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\47\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\47\0\47\0\47\0\47"+
    "\0\47\0\u01ad\0\47\0\47\0\u01d4\0\u01fb\0\47\0\47"+
    "\0\47\0\47\0\u0222\0\u0249\0\47\0\u0270\0\303\0\47"+
    "\0\u0297\0\u02be\0\u02e5\0\47\0\47\0\47\0\47\0\47"+
    "\0\47\0\u030c\0\u0333\0\303\0\u035a\0\u0381\0\u03a8\0\u03cf"+
    "\0\165\0\u03f6\0\u041d\0\165\0\u0444\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\4\1\6\1\2\1\7"+
    "\1\10\1\2\1\4\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\3\4\1\34"+
    "\3\4\1\35\50\0\2\3\50\0\2\4\5\0\1\4"+
    "\22\0\10\4\5\0\1\5\3\0\1\36\36\0\6\37"+
    "\1\40\1\41\37\37\4\0\1\42\5\0\2\42\25\0"+
    "\3\42\17\0\1\43\47\0\1\44\46\0\1\45\50\0"+
    "\1\46\54\0\1\47\36\0\1\50\46\0\1\51\35\0"+
    "\2\4\5\0\1\4\22\0\1\4\1\52\6\4\5\0"+
    "\2\4\5\0\1\4\22\0\5\4\1\53\2\4\5\0"+
    "\1\36\42\0\6\37\1\54\1\41\37\37\4\0\1\55"+
    "\5\0\2\55\25\0\3\55\3\0\1\43\1\0\45\43"+
    "\4\0\2\4\5\0\1\4\22\0\2\4\1\56\5\4"+
    "\5\0\2\4\5\0\1\4\22\0\6\4\1\57\1\4"+
    "\5\0\1\60\5\0\2\60\25\0\3\60\7\0\2\4"+
    "\5\0\1\4\22\0\3\4\1\61\4\4\5\0\2\4"+
    "\5\0\1\4\22\0\7\4\1\62\5\0\1\63\5\0"+
    "\2\63\25\0\3\63\7\0\2\4\5\0\1\4\22\0"+
    "\3\4\1\64\4\4\5\0\1\65\5\0\2\65\25\0"+
    "\3\65\7\0\1\66\5\0\2\66\25\0\3\66\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1131];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\5\1\5\11\1\1\2\11"+
    "\2\1\4\11\2\1\1\11\1\1\1\0\1\11\2\0"+
    "\1\1\6\11\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[54];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _VLayoutLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _VLayoutLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 35: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 36: break;
          case 3: 
            { return ID;
            } 
            // fall through
          case 37: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 38: break;
          case 5: 
            { return OP_DOT;
            } 
            // fall through
          case 39: break;
          case 6: 
            { return OP_DIVIDE;
            } 
            // fall through
          case 40: break;
          case 7: 
            { return OP_EQ;
            } 
            // fall through
          case 41: break;
          case 8: 
            { return OP_NOT;
            } 
            // fall through
          case 42: break;
          case 9: 
            { return OP_ALT;
            } 
            // fall through
          case 43: break;
          case 10: 
            { return OP_OPT;
            } 
            // fall through
          case 44: break;
          case 11: 
            { return OP_PLUS;
            } 
            // fall through
          case 45: break;
          case 12: 
            { return OP_MINUS;
            } 
            // fall through
          case 46: break;
          case 13: 
            { return OP_MULTIPLY;
            } 
            // fall through
          case 47: break;
          case 14: 
            { return OP_MOD;
            } 
            // fall through
          case 48: break;
          case 15: 
            { return OP_COLON;
            } 
            // fall through
          case 49: break;
          case 16: 
            { return OP_COMMA;
            } 
            // fall through
          case 50: break;
          case 17: 
            { return OP_MORE;
            } 
            // fall through
          case 51: break;
          case 18: 
            { return OP_LESS;
            } 
            // fall through
          case 52: break;
          case 19: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 53: break;
          case 20: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 54: break;
          case 21: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 55: break;
          case 22: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 56: break;
          case 23: 
            { return LOCALIZED;
            } 
            // fall through
          case 57: break;
          case 24: 
            { return STRING;
            } 
            // fall through
          case 58: break;
          case 25: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 59: break;
          case 26: 
            { return OP_EQEQ;
            } 
            // fall through
          case 60: break;
          case 27: 
            { return OP_NEQ;
            } 
            // fall through
          case 61: break;
          case 28: 
            { return OP_OR;
            } 
            // fall through
          case 62: break;
          case 29: 
            { return OP_AND;
            } 
            // fall through
          case 63: break;
          case 30: 
            { return OP_MORE_EQ;
            } 
            // fall through
          case 64: break;
          case 31: 
            { return OP_LESS_EQ;
            } 
            // fall through
          case 65: break;
          case 32: 
            { return CONST_TRUE;
            } 
            // fall through
          case 66: break;
          case 33: 
            { return CONST_FALSE;
            } 
            // fall through
          case 67: break;
          case 34: 
            { return COLOR;
            } 
            // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
